stages:
    - prepare
    - build
    - test
    - package

cache:
    key: "$CI_JOB_NAME"
    paths:
        - target/

.prepare-rust-image: &prepare-rust-image
    stage: prepare
    tags:
        - docker-available
        - local
    script:
        - JOB_NAME=( $CI_JOB_NAME )
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker pull "$(grep '^FROM' Dockerfile.build | awk '{ print $2; }' | head -n1)"
        - docker build -t "${CI_REGISTRY_IMAGE}/build:${JOB_NAME[3]}" -f Dockerfile.build .
        - docker push "${CI_REGISTRY_IMAGE}/build:${JOB_NAME[3]}"

prepare rust image stable: *prepare-rust-image
prepare rust image beta: *prepare-rust-image
prepare rust image nightly: *prepare-rust-image

rustfmt:
    stage: build
    tags:
        - docker
    image: "${CI_REGISTRY_IMAGE}/build:stable"
    script:
        - cargo fmt -- --write-mode diff

build dynamic binary on stable:
    stage: build
    tags:
        - docker
    image: "${CI_REGISTRY_IMAGE}/build:stable"
    script:
        - cargo build --verbose
        - cargo build --release
    cache:
        key: "dynamic binary on stable"
        paths:
            - target/
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock
            - target/release/dfwrs

build dynamic binary on beta:
    stage: build
    tags:
        - docker
    image: "${CI_REGISTRY_IMAGE}/build:beta"
    script:
        - cargo build --verbose
        - cargo build --release
    cache:
        key: "dynamic binary on beta"
        paths:
            - target/
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock
            - target/release/dfwrs

build dynamic binary on nightly:
    stage: build
    tags:
        - docker
    image: "${CI_REGISTRY_IMAGE}/build:nightly"
    script:
        - cargo build --verbose
        - cargo build --release
    cache:
        key: "dynamic binary on nightly"
        paths:
            - target/
    allow_failure: true
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock
            - target/release/dfwrs

build static binary:
    stage: build
    tags:
        - rust-cross
        - local
    script:
        - cross build --target x86_64-unknown-linux-musl --release
        - cp target/x86_64-unknown-linux-musl/release/dfwrs dfwrs
    cache:
        key: "static binary"
        paths:
            - target/
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock
            - dfwrs

test dynamic binary on stable:
    stage: test
    tags:
        - docker
    image: "${CI_REGISTRY_IMAGE}/build:stable"
    script:
        - cargo test -- --nocapture
    cache:
        key: "dynamic binary on stable"
        paths:
            - target/

test dynamic binary on beta:
    stage: test
    tags:
        - docker
    image: "${CI_REGISTRY_IMAGE}/build:beta"
    script:
        - cargo test -- --nocapture
    cache:
        key: "dynamic binary on beta"
        paths:
            - target/

test dynamic binary on nightly:
    stage: test
    tags:
        - docker
    image: "${CI_REGISTRY_IMAGE}/build:nightly"
    script:
        - cargo test -- --nocapture
    cache:
        key: "dynamic binary on nightly"
        paths:
            - target/
    allow_failure: true

test static binary:
    stage: test
    tags:
        - rust-cross
    script:
        - cross test --target x86_64-unknown-linux-musl -- --nocapture
    cache:
        key: "static binary"
        paths:
            - target/

test docker tests on 17.04.0-ce:
    stage: test
    tags:
        - rust
        - docker-available
    before_script:
        - >
            docker run
            --rm -d --name "dind-runner-${CI_JOB_ID}" --privileged
            docker:17.04.0-ce-dind --iptables=false
        - export DOCKER_HOST="http://$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "dind-runner-${CI_JOB_ID}"):2375"
    script:
        - cargo test --all-features -- --nocapture
    after_script:
        - docker stop "dind-runner-${CI_JOB_ID}"
        - docker rm -f "dind-runner-${CI_JOB_ID}"

package image for feature-branch:
    stage: package
    tags:
        - docker-available
        - local
    dependencies:
        - build static binary
    only:
        - branches
    except:
        - master
        - /^develop\/.*$/
    script:
        - docker build -t "${CI_REGISTRY_IMAGE}/branches:${CI_COMMIT_REF_SLUG}" .
        - docker image rm "${CI_REGISTRY_IMAGE}/branches:${CI_COMMIT_REF_SLUG}"

package and push image for tags:
    stage: package
    tags:
        - docker-available
        - local
    dependencies:
        - build static binary
    only:
        - tags
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" .
        - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

package and push image on develop patch:
    stage: package
    tags:
        - docker-available
        - local
    dependencies:
        - build static binary
    only:
        - develop/patch
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -t "${CI_REGISTRY_IMAGE}/develop:patch" .
        - docker push "${CI_REGISTRY_IMAGE}/develop:patch"

package and push image on develop minor:
    stage: package
    tags:
        - docker-available
        - local
    dependencies:
        - build static binary
    only:
        - develop/minor
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -t "${CI_REGISTRY_IMAGE}/develop:minor" .
        - docker push "${CI_REGISTRY_IMAGE}/develop:minor"

package and push image on master:
    stage: package
    tags:
        - docker-available
        - local
    dependencies:
        - build static binary
    only:
        - master
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -t $CI_REGISTRY_IMAGE .
        - docker push $CI_REGISTRY_IMAGE

