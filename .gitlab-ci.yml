stages:
    - build
    - test docker
    - package

variables:
    CARGO_HOME: $CI_PROJECT_DIR/cargo

rustfmt:
    stage: build
    tags:
        - docker
    image: rustlang/rust:nightly
    script:
        - rustup component add rustfmt-preview
        - cargo fmt -- --write-mode diff

build and test dynamic binary on stable:
    stage: build
    tags:
        - docker
    image: rust:latest
    script:
        - cargo build --verbose
        - cargo test -- --nocapture
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock

build dynamic binary on nightly:
    stage: build
    tags:
        - docker
    image: rustlang/rust:nightly
    script:
        - cargo build --verbose
    allow_failure: true
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock

build static binary:
    stage: build
    tags:
        - rust-cross
    script:
        - cross build --target x86_64-unknown-linux-musl --release
        - cross test --target x86_64-unknown-linux-musl -- --nocapture
        - cp target/x86_64-unknown-linux-musl/release/dfw dfw
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock
            - dfw

build for docker tests:
    stage: build
    tags:
        - rust
        - docker-available
    script:
        - cargo build --verbose
        - cargo build --verbose --tests
    cache:
        key: "docker-tests"
        paths:
        - target/
        - cargo/
        policy: push

.test-docker-tests: &test-docker-tests
    stage: test docker
    tags:
        - rust
        - docker-available
    only:
        - master
        - /^develop\/.*$/
    dependencies: [] # don't download artifacts from previous jobs
    cache:
        key: "docker-tests"
        paths:
        - target/
        - cargo/
        policy: pull
    before_script:
        # Extract docker version
        - JOB_NAME=( $CI_JOB_NAME )
        - echo "$JOB_NAME"
        - DIND_VERSION="${JOB_NAME[3]}"
        - echo "$DIND_VERSION"
        # Start dind-container
        - >
            docker run
            --rm -d --name "dind-runner-${CI_JOB_ID}" --privileged
            "docker:$DIND_VERSION-dind" --iptables=false
        # Get dind-container IP
        - DIND_IP_ADDRESS="$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "dind-runner-${CI_JOB_ID}")"
        - echo "$DIND_IP_ADDRESS"
        # Wait for dind-container to be ready
        - >
            until docker -H "tcp://${DIND_IP_ADDRESS}:2375" info >/dev/null 2>&1; do sleep 1; done
        - export DOCKER_HOST="http://${DIND_IP_ADDRESS}:2375"
        - echo "$DOCKER_HOST"
    script:
        - RUST_TEST_THREADS=1 cargo test --all-features -j1 -- --nocapture
    after_script:
        - docker stop "dind-runner-${CI_JOB_ID}"

# API from 1.12.6 and below is not compatible.
test on docker 1.13.0: *test-docker-tests
test on docker 1.13.1: *test-docker-tests
test on docker 17.03.0-ce: *test-docker-tests
test on docker 17.03.1-ce: *test-docker-tests
test on docker 17.03.2-ce: *test-docker-tests
test on docker 17.04.0-ce: *test-docker-tests
test on docker 17.05.0-ce: *test-docker-tests
test on docker 17.06.0-ce: *test-docker-tests
test on docker 17.06.1-ce: *test-docker-tests
test on docker 17.07.0-ce: *test-docker-tests
test on docker 17.09.0-ce: *test-docker-tests
test on docker 17.09.1-ce: *test-docker-tests
test on docker 17.10.0-ce: *test-docker-tests
test on docker 17.11.0-ce: *test-docker-tests
test on docker 17.12.0-ce: *test-docker-tests
test on docker 18.01.0-ce: *test-docker-tests
test on docker 18.02.0-ce:
    <<: *test-docker-tests
    only:
        - /.*/

package and push image for feature-branch:
    stage: package
    tags:
        - docker-available
    dependencies:
        - build static binary
    only:
        - branches
    except:
        - master
        - /^develop\/.*$/
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t "${CI_REGISTRY_IMAGE}/branches:${CI_COMMIT_REF_SLUG}" .
        - docker push "${CI_REGISTRY_IMAGE}/branches:${CI_COMMIT_REF_SLUG}"

package and push image for tags:
    stage: package
    tags:
        - docker-available
    dependencies:
        - build static binary
    only:
        - tags
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" .
        - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

package and push image on develop patch:
    stage: package
    tags:
        - docker-available
    dependencies:
        - build static binary
    only:
        - develop/patch
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t "${CI_REGISTRY_IMAGE}/develop:patch" .
        - docker push "${CI_REGISTRY_IMAGE}/develop:patch"

package and push image on develop minor:
    stage: package
    tags:
        - docker-available
    dependencies:
        - build static binary
    only:
        - develop/minor
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t "${CI_REGISTRY_IMAGE}/develop:minor" .
        - docker push "${CI_REGISTRY_IMAGE}/develop:minor"

package and push image on master:
    stage: package
    tags:
        - docker-available
    dependencies:
        - build static binary
    only:
        - master
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t $CI_REGISTRY_IMAGE .
        - docker push $CI_REGISTRY_IMAGE

